###############################################################################
## Stage 1
rm(list = ls()) ; library(data.table); library(survival) ; set.seed(1234)
n = 1000
num_patients_stage1 <- n
states_stage1 <- data.table(
  survival.month.1st = numeric(num_patients_stage1),
  TumorSize = numeric(num_patients_stage1),
  Severity = numeric(num_patients_stage1),
  Treatment = character(num_patients_stage1)
)
## Assign treatments based on proportions (16, 64, 16)
num_treatment_A_stage1 <- as.integer(num_patients_stage1 * 0.16)
num_treatment_B_stage1 <- as.integer(num_patients_stage1 * 0.64)
num_placebo_stage1 <- num_patients_stage1 - num_treatment_A_stage1 - num_treatment_B_stage1
treatment_stage1 <- c(
  rep("A", num_treatment_A_stage1),
  rep("B", num_treatment_B_stage1),
  rep("P", num_placebo_stage1)
)
states_stage1$Treatment <- treatment_stage1

## Define patient characteristics and survival rules for the first stage
states_stage1$TumorSize[states_stage1$Treatment == "A"] <- runif(num_treatment_A_stage1, min = 5, max = 10)
states_stage1$TumorSize[states_stage1$Treatment == "B"] <- runif(num_treatment_B_stage1, min = 3, max = 6)
states_stage1$TumorSize[states_stage1$Treatment == "P"] <- runif(num_placebo_stage1, min = 1, max = 3)

states_stage1$Severity[states_stage1$Treatment == "A"] <- 3
states_stage1$Severity[states_stage1$Treatment == "B"] <- 2
states_stage1$Severity[states_stage1$Treatment == "P"] <- 1

states_stage1$survival.month.1st =  30 - 0.5 * states_stage1$TumorSize - 5 * states_stage1$Severity + rnorm(num_patients_stage1 ,0,1)
head(states_stage1)
tail(states_stage1)

################################################################################
## STATE 2 with no censoring
num_patients_stage2 <- n
states_stage2 <- data.table(
  survival.month.2nd = numeric(num_patients_stage2),
  TumorSize = numeric(num_patients_stage2),
  Severity = numeric(num_patients_stage2),
  Treatment = character(num_patients_stage2)
)
# Assign treatments based on proportions (8, 40, 48)
num_treatment_A_stage2 <- as.integer(num_patients_stage2 * 0.08)
num_treatment_B_stage2 <- as.integer(num_patients_stage2 * 0.40)
num_placebo_stage2 <- num_patients_stage2 - num_treatment_A_stage2 - num_treatment_B_stage2

treatment_stage2 <- c(
  rep("A", num_treatment_A_stage2),
  rep("B", num_treatment_B_stage2),
  rep("P", num_placebo_stage2)
)

states_stage2$Treatment <- treatment_stage2

# Define patient characteristics and survival rules for the second stage
states_stage2$TumorSize[states_stage2$Treatment == "A"] <- runif(num_treatment_A_stage2, min = 5, max = 10)
states_stage2$TumorSize[states_stage2$Treatment == "B"] <- runif(num_treatment_B_stage2, min = 3, max = 6)
states_stage2$TumorSize[states_stage2$Treatment == "P"] <- runif(num_placebo_stage2, min = 1, max = 3)

states_stage2$Severity[states_stage2$Treatment == "A"] <- 3
states_stage2$Severity[states_stage2$Treatment == "B"] <- 2
states_stage2$Severity[states_stage2$Treatment == "P"] <- 1

states_stage2$survival.month.2nd =  30 - 0.5 * states_stage2$TumorSize - 5 * states_stage2$Severity + rnorm(num_patients_stage1 ,0,1)
head(states_stage2)
tail(states_stage2)

combined_data = cbind(states_stage1,states_stage2)
names(combined_data) = c("Surv1", "Tumorsize1", "Severity1","Trt1","Surv2","Tumorsize2","Severity2","Trt2")
head(combined_data)
attach(combined_data)

num_states <- 2
num_actions <- 3
Q <- matrix(0, nrow = num_states, ncol = num_actions)

alpha <- 0.1  # Learning rate
gamma <- 0.9  # Discount factor
epsilon <- 0.2  # Epsilon for epsilon-greedy policy
num_iterations <- 500 # Number of iterations for Q-value updates

for (iteration in 1:num_iterations) {
  # Update Q-value for state 2
  state2 <- 2
  if (runif(1) < epsilon) {
    # Explore: choose a random action
    action2 <- sample(1:num_actions, 1)
  } else {
    # Exploit: choose the action with the highest Q-value
    action2 <- which.max(Q[state2, ])
  }
  survival2 = 30 - 0.5 * Tumorsize2[1] - 5 * Severity2[1] + rnorm(1,0,1)
  reward2 <- c(survival2, survival2, survival2)[action2] + 
    5*c(Severity2[1]==3, Severity2[1]==2, Severity2[1]==1)[action2]
  Q[state2, action2] <- (1 - alpha) * Q[state2, action2] + alpha * reward2
  
  # Update Q-value for state 1
  state1 <- 1
  if (runif(1) < epsilon) {
    # Explore: choose a randoma action
    action1 <- sample(1:num_actions, 1)
  } else {
    # Exploit: choose the action with the highest Q-value
    action1 <- which.max(Q[state1, ])
  }
  survival1 = 30 - 0.5 * Tumorsize1[1] - 5 * Severity1[1]
  reward1 <- c(survival1,survival1,survival1)[action1] +
    5*c(Severity1[1]==3, Severity1[1]==2, Severity1[1]==1)[action1]
  Q[state1, action1] <- (1 - alpha) * Q[state1, action1] + alpha * (reward1 + gamma * max(Q[state2, ]))
}

print(Q)
