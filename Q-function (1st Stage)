library(bujar)
library(survival)
library(ggplot2)
library(tidyr)

# Sample size and covariates
n <- 1000
Sex <- rbinom(n, 1, 0.5)
TumorSize <- runif(n, -1, 3)

# True parameters
beta_0 <- 10
beta_1 <- 0.1
beta_2 <- -1
gamma_1 <- 0.01
gamma_2 <- 1.3

# True Q-values for treatment A and B
Q_A_true <- beta_0 + beta_1 * Sex + beta_2 * TumorSize + gamma_1 + gamma_2 * TumorSize
Q_B_true <- beta_0 + beta_1 * Sex + beta_2 * TumorSize

# Add noise and assign treatment
epsilon <- rnorm(n)
A <- rbinom(n, 1, 0.5)

# Simulated survival and censoring
T_true <- ifelse(A == 1, Q_A_true, Q_B_true) + epsilon
C <- runif(n, quantile(T_true, 0.2), quantile(T_true, 0.8))
Y <- pmin(T_true, C)
delta <- as.numeric(T_true <= C)
mean(delta)

# Create full dataset
df <- data.frame(Sex, TumorSize, A, T_obs = Y, delta, Q_A_true, Q_B_true)
df_A <- df[df$A == 1, ]
df_B <- df[df$A == 0, ]

# Design matrices for bujar
x_A <- as.matrix(df_A[, c("Sex", "TumorSize")])
x_B <- as.matrix(df_B[, c("Sex", "TumorSize")])
x_all <- as.matrix(df[, c("Sex", "TumorSize")])

# Fit BJ using bujar
fit_A_bj <- bujar(y = log(df_A$T_obs), cens = df_A$delta, x = x_A, learner = "linear.regression", tuning = FALSE)
fit_B_bj <- bujar(y = log(df_B$T_obs), cens = df_B$delta, x = x_B, learner = "linear.regression", tuning = FALSE)

# Predict Q-values and exponentiate
Q_A_bj <- exp(predict(fit_A_bj, newx = x_all))
Q_B_bj <- exp(predict(fit_B_bj, newx = x_all))

# Fit Cox models
fit_A_cox <- coxph(Surv(T_obs, delta) ~ Sex + TumorSize, data = df_A)
fit_B_cox <- coxph(Surv(T_obs, delta) ~ Sex + TumorSize, data = df_B)
lp_A <- predict(fit_A_cox, newdata = df, type = "lp")
lp_B <- predict(fit_B_cox, newdata = df, type = "lp")
base_A <- basehaz(fit_A_cox, centered = FALSE)
base_B <- basehaz(fit_B_cox, centered = FALSE)

# Compute expected survival from Cox model
compute_surv <- function(lp, base) {
  sapply(lp, function(lpi) {
    sum(diff(c(0, base$time)) * exp(-base$hazard * exp(lpi)))
  })
}

Q_A_cox <- compute_surv(lp_A, base_A)
Q_B_cox <- compute_surv(lp_B, base_B)

# Add to data frame
df$Q_A_bj <- Q_A_bj
df$Q_B_bj <- Q_B_bj
df$Q_A_cox <- Q_A_cox
df$Q_B_cox <- Q_B_cox

# Prepare for plotting
df_long <- pivot_longer(df,
                        cols = c(Q_A_true, Q_A_bj, Q_A_cox, Q_B_true, Q_B_bj, Q_B_cox),
                        names_to = "Model", values_to = "Q_value"
)

# Add method and treatment group
df_long$Method <- gsub("Q_[AB]_", "", df_long$Model)
df_long$Treatment <- ifelse(grepl("Q_A_", df_long$Model), "A", "B")

# Create x-axis grouping factor with custom order and labels
df_long$TreatmentLabel <- factor(df_long$Model,
                                 levels = c("Q_A_true", "Q_A_bj", "Q_A_cox", "Q_B_true", "Q_B_bj", "Q_B_cox"),
                                 labels = c("A", "A", "A", "B", "B", "B")
)

# Define fill colors and method labels
df_long$Method <- factor(df_long$Method, levels = c("true", "bj", "cox"))
colors <- c("true" = "#000066", "bj" = "#0000FF", "cox" = "#ADD8E6")

# Boxplot with custom x-axis labels
ggplot(df_long, aes(x = TreatmentLabel, y = Q_value, fill = Method)) + 
  geom_boxplot(alpha = 0.7, position = position_dodge(width = 0.8)) + 
  labs(
    title = "True vs Estimated Q-values",
    x = "Treatment",
    y = "Q-value",
    fill = "Method"
  ) + 
  scale_fill_manual(values = colors, labels = c("True", "BJ-Q", "Cox-Q")) + 
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 18),
    axis.text.y = element_text(size = 16),
    axis.title.x = element_text(size = 18, face = "bold"),
    axis.title.y = element_text(size = 18, face = "bold"),
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
    legend.title = element_text(size = 16),
    legend.text = element_text(size = 14)
  )

# Compute true optimal treatment
true_opt <- ifelse(df$Q_A_true > df$Q_B_true, 1, 0)

# Estimated treatment decisions
bj_opt <- ifelse(Q_A_bj > Q_B_bj, 1, 0)
cox_opt <- ifelse(Q_A_cox > Q_B_cox, 1, 0)

# Accuracy
acc_bj <- mean(bj_opt == true_opt)
acc_cox <- mean(cox_opt == true_opt)

cat("BJ decision accuracy:  ", round(acc_bj, 4), "\n")
cat("Cox decision accuracy: ", round(acc_cox, 4), "\n")


# Total Q-values per subject for each method
true_total <- ifelse(df$A == 1, df$Q_A_true, df$Q_B_true)
bj_total   <- ifelse(df$A == 1, df$Q_A_bj,   df$Q_B_bj)
cox_total  <- ifelse(df$A == 1, df$Q_A_cox,  df$Q_B_cox)

# Group labels
method_bj  <- c(rep("True", n), rep("BJ-Q",  n))
method_cox <- c(rep("True", n), rep("Cox-Q", n))

# Combine data and censoring (Q-values treated as observed)
logrank_bj  <- survdiff(Surv(c(true_total, bj_total), rep(1, 2 * n)) ~ method_bj)
logrank_cox <- survdiff(Surv(c(true_total, cox_total), rep(1, 2 * n)) ~ method_cox)

# Print log-rank test results
print(logrank_bj)
print(logrank_cox)

# Accuracy
n_sim <- 100

acc_bj_vec <- numeric(n_sim)
acc_cox_vec <- numeric(n_sim)

compute_surv <- function(lp, base) {
  sapply(lp, function(lpi) {
    sum(diff(c(0, base$time)) * exp(-base$hazard * exp(lpi)))
  })
}

for (sim in 1:n_sim) {
  Sex <- rbinom(n, 1, 0.5)
  TumorSize <- runif(n, -1, 3)
  
  beta_0 <- 10
  beta_1 <- 0.1
  beta_2 <- -1
  gamma_1 <- 0.01
  gamma_2 <- 1.3
  
  Q_A_true <- beta_0 + beta_1 * Sex + beta_2 * TumorSize + gamma_1 + gamma_2 * TumorSize
  Q_B_true <- beta_0 + beta_1 * Sex + beta_2 * TumorSize
  
  epsilon <- rnorm(n)
  A <- rbinom(n, 1, 0.5)
  T_true <- ifelse(A == 1, Q_A_true, Q_B_true) + epsilon
  C <- runif(n, quantile(T_true, 0.2), quantile(T_true, 0.8))
  Y <- pmin(T_true, C)
  delta <- as.numeric(T_true <= C)
  
  df <- data.frame(Sex, TumorSize, A, T_obs = Y, delta, Q_A_true, Q_B_true)
  df_A <- df[df$A == 1, ]
  df_B <- df[df$A == 0, ]
  
  x_A <- as.matrix(df_A[, c("Sex", "TumorSize")])
  x_B <- as.matrix(df_B[, c("Sex", "TumorSize")])
  x_all <- as.matrix(df[, c("Sex", "TumorSize")])
  
  fit_A_bj <- bujar(y = log(df_A$T_obs), cens = df_A$delta, x = x_A, learner = "linear.regression", tuning = FALSE)
  fit_B_bj <- bujar(y = log(df_B$T_obs), cens = df_B$delta, x = x_B, learner = "linear.regression", tuning = FALSE)
  
  Q_A_bj <- exp(predict(fit_A_bj, newx = x_all))
  Q_B_bj <- exp(predict(fit_B_bj, newx = x_all))
  
  fit_A_cox <- coxph(Surv(T_obs, delta) ~ Sex + TumorSize, data = df_A)
  fit_B_cox <- coxph(Surv(T_obs, delta) ~ Sex + TumorSize, data = df_B)
  
  lp_A <- predict(fit_A_cox, newdata = df, type = "lp")
  lp_B <- predict(fit_B_cox, newdata = df, type = "lp")
  
  base_A <- basehaz(fit_A_cox, centered = FALSE)
  base_B <- basehaz(fit_B_cox, centered = FALSE)
  
  Q_A_cox <- compute_surv(lp_A, base_A)
  Q_B_cox <- compute_surv(lp_B, base_B)
  
  true_opt <- ifelse(df$Q_A_true > df$Q_B_true, 1, 0)
  bj_opt   <- ifelse(Q_A_bj > Q_B_bj, 1, 0)
  cox_opt  <- ifelse(Q_A_cox > Q_B_cox, 1, 0)
  
  acc_bj_vec[sim] <- mean(bj_opt == true_opt)
  acc_cox_vec[sim] <- mean(cox_opt == true_opt)
}

summary_bj <- summary(acc_bj_vec)
summary_cox <- summary(acc_cox_vec)

print("BJ-Q Decision Accuracy Summary:")
print(summary_bj)

print("Cox-Q Decision Accuracy Summary:")
print(summary_cox)

